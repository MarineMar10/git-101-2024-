---
title: "Dplyr 101"
author: "Fabrice Rossi"
format: 
  html:
    code-fold: true
---

```{r}
#| message: false
here::i_am("git-101-2024.Rproj")
library(here)
library(vroom)
library(ggplot2)
theme_set(theme_bw())
```

## Data import

```{r}
#| message: false
white_wine <- vroom(here("data", "winequality-white.csv"))
```

|                        |                      |
|------------------------|----------------------|
| Number of observations | `r NROW(white_wine)` |
| Number of variables    | `r NCOL(white_wine)` |

```{r}
ggplot(white_wine, aes(x = quality)) +
  geom_bar()
```

## Data transformation
```{r}
#| message: false
library(dplyr)
```

### Column extraction 
```{r}
class(white_wine)
## class + column extraction
class(white_wine$quality)
## column extraction and then class
white_wine$quality |> class()
white_wine[["quality"]] |> class()
white_wine$`fixed acidity` |> class()
white_wine[["fixed acidity"]] |> class()
## dplyr style
white_wine |>
  pull(quality) |>
  class()
class(pull(white_wine, quality))
```

With `dplyr`, `pull()` is the column extraction function, somewhat similar to the
dollar `$` operator and to the double bracket `[[]]`. 


### Column recoding
This ggplot call gives a warning because `quality` is numeric which is not
supported for bar filling in `geom_bar()`.

```{r}
#| eval: false
#| code-fold: false
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```


```{r}
#| eval: false
white_wine$quality <- factor(white_wine$quality,
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
white_wine$quality <- white_wine$quality |> factor(
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
```

```{r}
white_wine <- white_wine |>
  mutate(quality = factor(quality, ordered = TRUE, levels = 3:9))
```

```{r}
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```

### Computing new columns
This is again a task for `mutate()`.

```{r}
white_wine <- white_wine |>
  mutate(`captured sulfur dioxide` = `total sulfur dioxide` - `free sulfur dioxide`,
         `free sd %` = round(`free sulfur dioxide` / `total sulfur dioxide` * 100, 2))
```

## Sub-setting
### Selecting columns
Column sub-setting is done with the `select()` function.

```{r}
white_wine |> 
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH)
```

Side note: we can display nicely data frames with the `knitr::kable()` function
but the original data frame is too big, so we select the first 10 rows with
`slice()`. 

```{r}
#| message: false
white_wine |> 
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH) |>
  slice(1:10) |>
  knitr::kable()
```
Positional selection based on the indices of the columns.

```{r}
#| eval: false
white_wine |> 
  select(1:3)
```

Columns can also be selected based on conditions on their names or on their
nature. 

```{r}
#| eval: false
white_wine |> 
  select(contains("acid") | pH)
```

Selection based on the content.

```{r}
#| eval: false
white_wine |> 
  select(where(is.factor))
```

```{r}
#| eval: false
white_wine |> 
  select(where(\(x) is.numeric(x) & (max(x) < 5)))
```
2 ways to select either on names or select on the properties of the columns (without considering the names). As the data frame is a list we apply to each of the column either true or false. is numeric test if the content of the column is numeric, then if it is true it does the second action. 
### Selecting rows

Simple selection is based on indices with `slice()`. 

```{r}
white_wine |> 
  slice(1:5, 150:155) |>
  select(alcohol, quality) |>
  knitr::kable()
```

Condition based selection uses `filter()`. Slice operates on the the number rendering. Filter with a condition gives the column where the condition is true. 

```{r}
white_wine |> 
  filter(alcohol > 14) |>
  select(alcohol, quality, `citric acid`, `residual sugar`) |>
  knitr::kable()
```
### Simple application
```{r}
ggplot(white_wine, aes(x=alcohol)) +
  geom_density(bw="sj") +
  geom_rug(alpha = 0.1)
```
```{r}
white_wine |> 
  filter(alcohol >= 13, `citric acid` < 1) |>
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c()
```

```{r}
white_wine |>
  mutate(`alcohol category` = case_when(alcohol <= 9 ~ "low",
                                        alcohol >= 13 ~ "high",
                                        .default = "medium"))
```

```{r}
white_wine |> 
    filter(alcohol <= 9) |>
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c()
```
```{r}
white_wine |>
  mutate(`alcohol category` = case_when(alcohol <= 9 ~ "low",
                                        alcohol >= 13 ~ "high",
                                        .default = "medium")) |>
  filter(`alcohol category` != "medium") |>
  filter(`citric acid` <= 1) |> 
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c() +
  facet_wrap(vars(`alcohol category`))
```

## Aggregation functions: 
Aka summary functions: turn a possibly long vector into a single value (still a vector!)

- standard statistics : `max(), min(), median() `etc. 
- Logical operation: `any(), all`
- Counts: `n()`

### Simple summary use: 
Based on the `summarise()` function or inside mutate. 

```{r}
white_wine |> 
  summarise(
    med_alcohol= median(alcohol), ## name the col
                        sd(alcohol))
```
```{r}
white_wine |>
  select(alcohol) |>
  mutate(m_a= median(alcohol)) ## no summary so it will give the medoan 4898 times for all the levels of alcohol.
```
```{r}
white_wine |> 
  select(alcohol) |>
  mutate(a_m_median= alcohol-median(alcohol),
         .keep="none")
```
```{r}
white_wine |> 
  select(alcohol) |>
  mutate(na= (alcohol -mean(alcohol))/sd(alcohol),
         na_r = (alcohol-median(alcohol))/ IQR(alcohol),
         .keep="none")
```
```{r}
white_wine |> 
  select(alcohol) |>
  summarise(mean(alcohol),
            sd(alcohol),
            median(alcohol),
            IQR(alcohol))
```
IQR >sd the alcohol value is over dispersed compared to the gaussian distribution. 

### More complex summary functions: 
Enssentially `quantile()`. 
```{r}
quantile(white_wine$`residual sugar`)
```
The vector containes the min and max values (0%, 100%) and then the three quarters. There is a long tail because 75% have low level but a long tail to the 100%. 
```{r}
quantile(white_wine$`residual sugar`, probs=seq(0,1, 0.1))
```
```{r}
mean(white_wine$`residual sugar`)
```
Larger than the median, but between 50% and 60%, so no big values effect. 
```{r}
white_wine |>
  summarise(quantile(`residual sugar`))
```

```{r}
white_wine |>
  reframe(quantile(`residual sugar`), 
          mean(`residual sugar`))
```
Does the same thing but summarise does more, so this functionnality is being switch to reframe. Just one data frame so the mean repeats itself. 
To not use reframe: 
```{r}
sugar_stats <- white_wine |>
  summarise(list(quantile(`residual sugar`)), 
                 mean(`residual sugar`))
```

### Group_by: 
```{r}
white_wine |> 
  summarise(median(`residual sugar`), 
            .by= quality) |>
  arrange(quality)
```
Create subgroups of the data set given a characteristic.The arrange give the list in a croissant order. There is no obvious link. 
```{r}
white_wine |> 
  summarise(median(`residual sugar`),
            n(),
            .by= quality) |>
  arrange(quality)
```
Collects the different values of quality and extract the rows, and apply the summary function we chose. Arrange is sorting the content. 
Adding n() gives the count of each variable used to do the median. 
```{r}
white_wine |> 
  summarise(median(`residual sugar`),
            n(),
            .by= alcohol)
```
Doing this grouping by a value whom there are a lot in the data might not be relevant because n() will be very low by category. 
```{r}
white_wine |> 
  mutate(ha=alcohol>= 13)
```

```{r}
white_wine |> 
  mutate(ha=alcohol>= 13) |>
  summarise(median(`residual sugar`),
            n(),
            .by= ha)
```
Create two groups on a condition, we define with mutate the new vairabke, and grouping by it.
Mutating by ha to give a condition for the level of high alcohol so the table show us if the values are in ha or not and give us the median in each category. 
```{r}
white_wine |> 
  mutate(alcohol_class =cut(alcohol, breaks= c(7,9, 10, 12, 13, 15), 
                            ordered_result = TRUE)) |>
  summarise(median(`residual sugar`),
            n(),
            .by= `alcohol_class`)
```
Decoupe the values into different categories and we do breaks to give intervals, the intervals have to start before or at the smallest value and vice versa. Cut is always producing discrete variables. 
```{r}
library(ggplot2)
white_wine |> 
  mutate(alcohol_class =cut(alcohol, breaks= c(7,9, 10, 12, 13, 15), 
                            ordered_result = TRUE)) |>
  ggplot(aes(x=alcohol_class))+
  geom_bar()
```
We can't have the conditional distribution of quality given alcohol because it is not discrete. 
```{r}
white_wine |> 
  mutate(alcohol_class =cut(alcohol, breaks= c(7,9, 10, 12, 13, 15), 
                            ordered_result = TRUE)) |>
  ggplot(aes(x=alcohol_class, fill=quality))+
  geom_bar(position="fill")
```
Cutting into classes, using on the x axis with quality, and filling the bars with the quality. 
```{r}
white_wine|>
  pull(alcohol) |>
  quantile(probs= seq(0,1, by=0.2))
```
we take the quantile with the probabilities cut in a sequence from 0 to 1 by 20% sections. 

```{r}
alcohol_quantiles <- 
white_wine|>
  pull(alcohol) |>
  quantile(probs= seq(0,1, by=0.1))
alcohol_quantiles
```

```{r}
alcohol_quantiles[1] <- alcohol_quantiles[1] -1
alcohol_quantiles
```
We want to modify only the first value of the vector. 
```{r}
white_wine |> 
  mutate(alcohol_class =cut(alcohol, breaks= alcohol_quantiles), 
                            ordered_result = TRUE) |>
  ggplot(aes(x=alcohol_class))+
  geom_bar()
```

```{r}
white_wine |> 
  mutate(alcohol_class =cut(alcohol, breaks= alcohol_quantiles), 
                            ordered_result = TRUE) |>
  ggplot(aes(x=alcohol_class, fill=quality))+
  geom_bar(position="fill")
```
#### Functions with a .by parameter
Some dplyr verbes support the .by parameter: 
- summarise()
- mutate()
- slice() in multiple ways
- filter
- reframe
```{r}
white_wine |>
  select(1:2) |>
  slice(1:5)
```
Give the first five value of the data frame on the first two columns.
```{r}
white_wine |>
  slice(1:5, .by=quality)|>
  select(1:2 | quality)
```
Fives rows per quality. 
```{r}
white_wine |>
  slice_sample(n=1)
```
Give one whine chosen randomly. 
```{r}
white_wine |>
  slice_sample(n=1, by=quality) |>
  select(1:2 | quality)
```
Selects one by quality. 
```{r}
white_wine |>
  slice_max(alcohol, by=quality) |>
  select(alcohol | quality)
```
Will select the max value in each quality. 
```{r}
white_wine |>
  mutate(avg_alcohol_quality = mean(alcohol), .by= quality)
```
#### Group by 
```{r}
white_wine |>
  group_by(quality)
```
If we apply a group to a data set, then all the other function that will be dot after will be like with a .by function. 
```{r}
white_wine |> 
  group_by(quality)|>
  summarise(mean(`citric acid`))
## Which is the same as
white_wine |>
  summarise(mean(`citric acid`), .by=quality)
```
```{r}
diamonds |> 
  group_by(cut) |>
  summarise(median(price))
```
```{r}
diamonds |> 
  group_by(cut, clarity)
```
40 groups because it is the multiplication of the number of groups in the two. 

```{r}
diamonds |> 
  group_by(cut, clarity) |>
  summarise(median(price))
```
40 rows because of the forty combinaison. There is a layer grouping where we group first by cut and then by clarity. 
```{r}
diamonds |> 
  group_by(cut, clarity) |>
  summarise(price_mc=median(price), .groups = "drop_last")|> 
  summarise(mean(price_mc))
```
We took the average inside the median groups. 
```{r}
diamonds |> 
  summarise(median(price), .by=c(cut, clarity))|>
  arrange(cut, clarity)
```
The .by combine the the two variables with c(). Without arrange the result is not sorted, but also the result is not grouped. 
```{r}
diamonds |> 
  summarise(price_mc= median(price), .by=c(cut, clarity)) |>
  summarise(mean(price_mc), .by=cut)|>
  arrange(cut)
```
We have to reprcise in the second summarise that we want to be group by. We use group b rather than .by because in most case it is more efficient. 

Conditional distribution of color(y) given cut(x): 
```{r}
diamonds |> 
  group_by(cut, color) |>
  summarise(N=n(), .groups= "drop_last")
```
We want to count the number of obersvations. 
```{r}
diamonds |> 
  group_by(cut, color) |>
  summarise(N=n(), .groups= "drop_last")|>
  summarise(sum(N))
```
```{r}
diamonds|>
  summarise(N=n(), .by = cut)
```

The summarise(sum(N)) is going to only do the values on the cut group. 
```{r}
diamonds |> 
  group_by(cut, color) |>
  summarise(N=n(), .groups= "drop_last")|>
  mutate(probs=N/sum(N))|>
  ungroup()
```
Probs of being in the faire group. 
```{r}
diamonds |>
  summarise(N=n(), .by=c(cut, color)) |>
  mutate(prob=N/sum(N), .by=c(cut)) |>
  arrange(cut, color)
```
We divide by the total N is we don't add .by cut in the last one. 
