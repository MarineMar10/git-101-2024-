---
title: "Tidyr 101"
format: html
---

```{r}
library(ggplot2)
library(vroom)
library(here)
library(dplyr)
library(tidyr)
```

### Long to wide table (pivoting)
```{r}
color_given_cut <-
diamonds |> 
  group_by(cut, color) |>
  summarise(N=n(), .groups= "drop_last")|>
  mutate(prob=N/sum(N)) |>
  ungroup()
```

```{r}
color_given_cut |>
  select(!N) |>
  pivot_wider(id_cols = cut, 
              names_from=color, 
              values_from= prob)
```
G tends to be more frequent in the ideal cut. Cut is the idea column because it gives the description of the object in the row. 
```{r}
color_given_cut |>
  select(!N) |>
  slice_sample(n=30)|>
  pivot_wider(names_from=color, 
              values_from= prob)
```
### Wide to long table (pivoting)
```{r}
data("world_bank_pop")
```

```{r}
world_bank_pop |>
  filter(indicator== "SP.POP.TOTL") |>
  select(!indicator) |>
  pivot_longer(!country)
```

```{r}
world_bank_pop |>
  filter(indicator== "SP.POP.TOTL") |>
  select(!indicator) |>
  pivot_longer(!country) |>
  ggplot(aes(x=name, y=value, color= country))+
  geom_point()+
  theme(legend.position= "none")
```

```{r}
world_bank_pop |>
  filter(indicator == "SP.POP.TOTL") |>
  filter(country %in% c("ESP", "FRA"))|>
  select(!indicator)
```

Pivot will bring into a configuriation in column that will work with ggplot.
```{r}
world_bank_pop |>
  filter(indicator == "SP.POP.TOTL") |>
  filter(country %in% c("ESP", "FRA"))|>
  select(!indicator)|>
  pivot_longer(!country)
```

```{r}
world_bank_pop |>
  filter(country %in% c("ESP", "FRA"))|>
  pivot_longer(!country & !indicator)
```

```{r}
world_bank_pop |>
  filter(indicator== "SP.POP.TOTL") |>
  select(!indicator) |>
  pivot_longer(!country, 
               names_to = "year",
               names_transform = as.integer,
               values_to = "total population") |>
  filter(country== "ESP") |>
  ggplot(aes(x=year, y=`total population`))+
  geom_line()
```
```{r}
world_bank_pop |>
  filter(indicator== "SP.POP.TOTL") |>
  select(!indicator) |>
  pivot_longer(!country, 
               names_to = "year",
               names_transform = as.integer,
               values_to = "total population") |>
  ggplot(aes(x=year, y=`total population`, color=country))+
  geom_line()+
  theme(legend.position= "none")+
  scale_y_continuous(transform= "log10")
```
```{r}
set.seed(42)
world_bank_pop |>
  filter(indicator== "SP.POP.TOTL") |>
  select(!indicator) |>
  filter(is.na(`2000`))|>
  slice_sample(n=10, weight_by = `2000`)|>
  pivot_longer(!country, 
               names_to = "year",
               names_transform = as.integer,
               values_to = "total population") |>
  ggplot(aes(x=year, y=`total population`, color=country))+
  geom_line()+
  theme(legend.position= "right")+
  scale_y_continuous(transform= "log10")
```
If we sample after pivoting we are going to remove some elements. weight_by, weight in the sample, we will have big countries. set.seed will select the start of the random generator, so everytime we generates it will give us the same things. 
```{r}
set.seed(42)
world_bank_pop |>
  filter(indicator== "SP.POP.TOTL") |>
  select(!indicator) |>
  filter(is.na(`2000`))|>
  slice_sample(n=10, weight_by = 1/`2000`)|>
  pivot_longer(!country, 
               names_to = "year",
               names_transform = as.integer,
               values_to = "total population") |>
  ggplot(aes(x=year, y=`total population`, color=country))+
  geom_line()+
  theme(legend.position= "right")+
  scale_y_continuous(transform= "log10")
```

## Nesting: 
```{r}
class(diamonds)
```
```{r}
df_list <- tibble(x=1:3,
                  y=letters[1:3],
                  z=list(1,2,3))
df_list
```
The vectors are doubles and have lenghts 1 because they have a single value. 
```{r}
df_list <- tibble(x=1:3,
                  y=letters[1:3],
                  z=list(c(1,2),c("ALice, Bob, Charlie"),3))
df_list
```
Because it is a list we can have everything we want in the columns. 

```{r}
df_list <- data.frame(x=1:3,
                  y=letters[1:3],
                  z=I(list(c(1,2),c("ALice, Bob, Charlie"),3)))
df_list
```
The I() before list will tell R to not try to change z in a 1*3 vector. 
### Linear models
We want to know if the price of diamounds can be predicted given all the other categories. 
We use lm and tell the predicted variable. Price as a (~) function of . (all variables including a constant/intercept)
```{r}
#| cache: true
diamonds_price_lm= lm(price ~ ., data=diamonds)
diamonds_price_lm
```
Coefficient: large intercept, big influence of carat, cut has a negative effect. 
```{r}
summary(diamonds_price_lm)
```
```{r}
plot(diamonds_price_lm)
```
QQ plot ... 
we want to split the data into deffierent subset and do a linear model for each subset. 
```{r}
diamonds |>
  nest(.by=cut)
```
Nesting over groups, for each of the group we get a data tibble. 
```{r}
#| cache: true
diamonds_cut_lm <-
  diamonds |>
  nest(.by=cut)|>
  mutate(sub_lm= lapply(data, \(x) lm(price~., data=diamonds)))
```
apply a new function to the list, data= to the component of data, we apply the fucntion x to call the linear model. 
```{r}
library(broom)
diamonds_cut_lm <-
  diamonds_cut_lm |>
  mutate(tlm= lapply(sub_lm, tidy))
```

```{r}
diamonds |>
  nest(.by=cut)|>
  unest(data)
```

```{r}
diamonds_cut_lm |>
  select(cut, tlm)|>
  unnest(tlm)
```
We have the cut and all the coefficents, the erro and p value, 
```{r}
diamonds_cut_lm |>
  select(cut, tlm)|>
  unnest(tlm)|>
  select(cut, term, estimate)
  pivot_wider(names_from = term,
              values_from = estimate)
```
The cuts are rowes, and the columns are coefficients. On this model the additive effect does not work because somme effect are positive for all cuts but fair, and vice versa. 
```{r}
diamonds_cut_lm |>
  select(cut, tlm)|>
  unnest(tlm)|>
  filter(p.value<0.01)|>
  select(cut, term, estimate)
  pivot_wider(names_from = term,
              values_from = estimate)
```

